{% set version = "3.35.0" %}

# handle undefined PYTHON in `noarch: generic` outputs
{% if PYTHON is not defined %}{% set PYTHON = "$PYTHON" %}{% endif %}

package:
  name: openmdao
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/o/openmdao/openmdao-{{ version }}.tar.gz
  sha256: cb61513f387bb14ee6ba04f641a3dc614bc4df734251c6f738712599a159b6b0

build:
  noarch: python
  number: 0
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  entry_points:
    - openmdao = openmdao.utils.om:openmdao_cmd
    - reset_notebook = openmdao.devtools.docutils:reset_notebook_cmd
    - run_om_test = openmdao.devtools.run_test:run_test
    - webview = openmdao.utils.webview:webview_argv
    - wingproj = openmdao.devtools.wingproj:run_wing

requirements:
  host:
    - hatchling
    - pip
    - python >=3.9
  run:
    - networkx >=2.0
    - numpy
    - packaging
    - python >=3.9
    - requests
    - scipy

test:
  requires:
    - pip
  imports:
    - openmdao
  commands:
    - pip check
    - openmdao --help
    - webview --help
    - wingproj --help

outputs:
  - name: openmdao

  - name: openmdao-with-doe
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("openmdao", max_pin="x.x.x") }}
        - pydoe3
    test:
      requires:
        - pip
      imports:
        - openmdao
      commands:
        - pip check
        - openmdao --help
        - webview --help
        - wingproj --help

  - name: openmdao-with-jax
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("openmdao", max_pin="x.x.x") }}
        - jax >=0.4.0
        - jaxlib >=0.4.0
    test:
      requires:
        - pip
      imports:
        - openmdao
      commands:
        - pip check
        - openmdao --help
        - webview --help
        - wingproj --help

  - name: openmdao-with-notebooks
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("openmdao", max_pin="x.x.x") }}
        - idna >=3.7
        - ipympl
        - notebook
    test:
      requires:
        - pip
      imports:
        - openmdao
      commands:
        - pip check
        - openmdao --help
        - webview --help
        - wingproj --help

  - name: openmdao-with-visualization
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("openmdao", max_pin="x.x.x") }}
        - bokeh >=2.4.0
        - colorama
        - matplotlib-base
    test:
      requires:
        - pip
      imports:
        - openmdao
      commands:
        - pip check
        - openmdao --help
        - webview --help
        - wingproj --help

  - name: openmdao-with-all
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("openmdao", max_pin="x.x.x") }}
        - {{ pin_subpackage("openmdao-with-doe", max_pin="x.x.x") }}
        - {{ pin_subpackage("openmdao-with-jax", max_pin="x.x.x") }}
        - {{ pin_subpackage("openmdao-with-notebooks", max_pin="x.x.x") }}
        - {{ pin_subpackage("openmdao-with-visualization", max_pin="x.x.x") }}
    test:
      files:
        - run_testflo.py
      requires:
        # for pip check
        - pip
        # networkx 3.2 drops py3.8, but `testflo` -> `coverage 5` won't solve there
        - networkx <3.2
        # [test] extra
        - aiounittest
        - num2words
        - numpydoc >=1.1
        - parameterized
        - pycodestyle >=2.4.0
        - pydocstyle >=2.0.0
        - testflo >=1.3.6
        - websockets >8
        # not available on conda-forge
        # - playwright>=1.20
      imports:
        - openmdao
      commands:
        - pip check
        - python run_testflo.py

about:
  home: https://openmdao.org
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE.txt
  summary: OpenMDAO framework infrastructure
  description: |
    OpenMDAO is an open-source high-performance computing platform
    for systems analysis and multidisciplinary optimization, written in Python. It
    enables you to decompose your models, making them easier to build and maintain,
    while still solving them in a tightly coupled manner with efficient parallel
    numerical methods.
  doc_url: https://openmdao.org/docs
  dev_url: https://github.com/OpenMDAO/OpenMDAO
  doc_source_url: https://github.com/OpenMDAO/OpenMDAO/tree/{{ version }}/openmdao/docs

extra:
  recipe-maintainers:
    - swryan
    - bollwyvl
